<?xml version="1.0" encoding="UTF-8"?>
<cursor-rules>
  <!-- Project Overview -->
  <project-info>
    <name>Perth Glory News</name>
    <description>A web application for delivering the latest news about Perth Glory Football Club</description>
    <domain>perthglorynews.com</domain>
    <tech-stack>
      <framework>SvelteKit</framework>
      <language>TypeScript</language>
      <database>MongoDB</database>
      <styling>Tailwind CSS</styling>
      <features>
        <feature>Dynamic article fetching</feature>
        <feature>Real-time updates</feature>
        <feature>SEO optimization</feature>
        <feature>Social media integration</feature>
        <feature>Progressive image loading</feature>
        <feature>Infinite scroll pagination</feature>
        <feature>Article preview caching</feature>
        <feature>Public news aggregation</feature>
        <feature>Automated content scraping</feature>
        <feature>Real-time match updates</feature>
      </features>
    </tech-stack>
  </project-info>

  <!-- Code Standards -->
  <coding-standards>
    <style>
      <rule>Use TypeScript for type safety</rule>
      <rule>Follow React best practices and hooks</rule>
      <rule>Implement responsive design using Tailwind classes</rule>
      <rule>Keep components modular and reusable</rule>
      <rule>Implement proper data fetching patterns</rule>
      <rule>Use Next.js ISR for article pages</rule>
      <rule>Implement loading states and skeletons</rule>
      <rule>Use React Suspense for lazy loading</rule>
    </style>
    <naming>
      <rule>Use PascalCase for components</rule>
      <rule>Use camelCase for functions and variables</rule>
      <rule>Use kebab-case for CSS classes and routes</rule>
      <rule>Use descriptive names for article slugs</rule>
    </naming>
    <data-handling>
      <rule>Implement proper caching strategies</rule>
      <rule>Use SWR for client-side data fetching</rule>
      <rule>Handle article pagination efficiently</rule>
      <rule>Implement proper error boundaries</rule>
      <rule>Use stale-while-revalidate caching strategy</rule>
      <rule>Implement optimistic updates for real-time content</rule>
      <rule>Cache article previews in localStorage</rule>
      <rule>Implement infinite scroll with virtualization</rule>
    </data-handling>
    <performance>
      <rule>Lazy load images with blur placeholder</rule>
      <rule>Implement content preloading for linked articles</rule>
      <rule>Use dynamic imports for heavy components</rule>
      <rule>Optimize and compress media assets</rule>
      <rule>Implement service worker for offline access</rule>
      <rule>Use Redis caching for frequent database queries</rule>
    </performance>
  </coding-standards>

  <!-- Project Structure -->
  <structure>
    <folders>
      <folder>/app: Next.js app router components and pages</folder>
      <folder>/components: Reusable React components</folder>
      <folder>/lib: Utility functions and shared logic</folder>
      <folder>/public: Static assets and images</folder>
      <folder>/styles: Global styles and Tailwind config</folder>
      <folder>/models: MongoDB schemas and models</folder>
      <folder>/api: API routes for article fetching</folder>
      <folder>/types: TypeScript type definitions</folder>
      <folder>/hooks: Custom React hooks for data fetching</folder>
      <folder>/cache: Caching utilities and configurations</folder>
      <folder>/services: External service integrations</folder>
      <folder>/scrapers: News scraping utilities and configurations</folder>
      <folder>/aggregators: Content aggregation services</folder>
      <folder>/feeds: RSS and news feed processors</folder>
    </folders>
    <content-structure>
      <route>/articles: Dynamic article routes</route>
      <route>/categories: News category pages</route>
      <route>/tags: Tag-based article filtering</route>
      <route>/search: Search functionality</route>
      <route>/api/articles: Article fetching endpoints</route>
      <route>/api/preview: Article preview endpoints</route>
      <route>/api/feeds: News feed endpoints</route>
      <route>/api/scraper: Scraping status endpoints</route>
    </content-structure>
  </structure>

  <!-- Content Management -->
  <content-management>
    <article-structure>
      <field>title: String (required)</field>
      <field>slug: String (unique, required)</field>
      <field>content: Rich text (required)</field>
      <field>excerpt: String</field>
      <field>author: Reference</field>
      <field>publishDate: Date</field>
      <field>categories: Array</field>
      <field>tags: Array</field>
      <field>featuredImage: String</field>
      <field>status: enum[draft, published]</field>
      <field>readTime: Number</field>
      <field>lastModified: Date</field>
      <field>imageBlurHash: String</field>
      <field>relatedArticles: Array</field>
      <field>sourceUrl: String</field>
      <field>sourceName: String</field>
      <field>scrapedAt: Date</field>
      <field>isScraped: Boolean</field>
    </article-structure>
    <scraping-sources>
      <source>
        <sname>Perth Glory Official</name>
        <url>https://www.perthglory.com.au</url>
        <updateInterval>15</updateInterval>
        <priority>high</priority>
        <selectors>
          <list>.news-list article</list>
          <title>.article-title</title>
          <content>.article-content</content>
        </selectors>
      </source>
      <source>
        <name>Keep Up</name>
        <url>https://keepup.com.au/perth-glory</url>
        <updateInterval>15</updateInterval>
        <priority>medium</priority>
        <selectors>
          <list>.news-grid article</list>
          <title>h2</title>
          <content>.article-body</content>
        </selectors>
      </source>
      <source>
        <name>Football Australia</name>
        <url>https://www.footballaustralia.com.au/news</url>
        <updateInterval>30</updateInterval>
        <priority>medium</priority>
      </source>
      <source>
        <name>Social Media Aggregator</name>
        <platforms>twitter,facebook,instagram</platforms>
        <updateInterval>5</updateInterval>
        <priority>low</priority>
      </source>
    </scraping-sources>
    <scraping-rules>
      <rule>
        <name>Rate Limiting</name>
        <config>
          <requests>2</requests>
          <interval>10</interval>
          <retryAttempts>3</retryAttempts>
        </config>
      </rule>
      <rule>
        <name>Content Attribution</name>
        <requirements>
          <sourceUrl>required</sourceUrl>
          <sourceName>required</sourceName>
          <publishDate>required</publishDate>
          <author>optional</author>
        </requirements>
      </rule>
      <rule>
        <name>Content Validation</name>
        <checks>
          <duplicateDetection>true</duplicateDetection>
          <contentAuthenticity>true</contentAuthenticity>
          <robotsTxtCompliance>true</robotsTxtCompliance>
        </checks>
      </rule>
    </scraping-rules>
    <update-frequency>
      <schedule>Match updates: Real-time during games</schedule>
      <schedule>News articles: Every 15 minutes</schedule>
      <schedule>Social media: Every 5 minutes</schedule>
      <schedule>Statistics: Post-match updates</schedule>
    </update-frequency>
    <seo-requirements>
      <requirement>Implement dynamic meta tags</requirement>
      <requirement>Generate sitemap.xml</requirement>
      <requirement>Use proper OpenGraph tags</requirement>
      <requirement>Include structured data</requirement>
      <requirement>Implement JSON-LD for articles</requirement>
      <requirement>Add article publishing metadata</requirement>
    </seo-requirements>
    <loading-optimization>
      <requirement>Implement progressive image loading</requirement>
      <requirement>Use blur hash placeholders</requirement>
      <requirement>Implement infinite scroll pagination</requirement>
      <requirement>Cache article previews</requirement>
      <requirement>Preload linked articles</requirement>
      <requirement>Optimize media assets</requirement>
    </loading-optimization>
  </content-management>

  <!-- AI Assistant Instructions -->
  <ai-instructions>
    <priorities>
      - Prioritize Perth Glory-specific content with precise and accurate football terminology
      - Implement mobile-first responsive design using TailwindCSS for optimal user experience across devices
      - Maintain clean, highly performant code adhering to SvelteKit best practices and conventions
      - Structure articles with clear hierarchy and semantic HTML to enhance readability and SEO
      - Optimize for Vercel deployment using @sveltejs/adapter-vercel
      - Configure proper edge caching strategies on Vercel's CDN
      - Implement efficient data fetching using SvelteKit endpoints optimized for serverless functions
      - Utilize Svelte stores for state management and real-time updates
      - Ensure proper error handling and loading states for news fetching operations
      - Configure proper build output for Vercel's serverless environment
      - Follow football news industry best practices meticulously to uphold the highest journalistic standards
      - Use environment variables for configuration in Vercel deployment
      - Implement proper API rate limiting for Vercel serverless functions
    </priorities>
    <constraints>
      - Respect copyright when handling news content, ensuring all sources are properly credited
      - Ensure accessibility compliance to the highest standards, making content available to all users
      - Optimize bundle size for Vercel's serverless function limits
      - Follow journalistic standards rigorously, maintaining the integrity and accuracy of all published content
      - Configure proper Vercel project settings for optimal performance
    </constraints>
    <content-guidelines>
      - Use proper football terminology consistently and accurately to reflect the sport's nuances
      - Implement efficient news article caching using Vercel's edge caching
      - Utilize Vercel's image optimization features for media assets
      - Implement social sharing features using native web share API when available
      - Structure API endpoints to work efficiently in serverless environment
      - Configure proper cache-control headers for Vercel CDN
    </content-guidelines>
  </ai-instructions>
</cursor-rules> 